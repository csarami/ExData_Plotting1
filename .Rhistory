fun <- function(i,j) 1/min(i,j)
fun(2,3)
fun<- mat2(size){
mat2<- function(size){
rows<-1:size
cols <-rows
outer(rows, cols, FUN=fun)
}
mat2(4)
fun <- function(i,j) 1/min(i,j)
mat2<- function(size){
rows<-1:size
cols <-rows
outer(rows, cols, FUN=fun)
}
fun(2,3)
mat2(3)
mat2<- function(size){
rows<-1:size
cols <-1:size
outer(rows, cols, FUN=fun)
}
fun(2,3)
mat2(3)
fun <- function(i,j) i*j
rows <- 1:5
cols <- 1:3
outer(rows,cols,FUN=fun)
size <-5
rows<-1:size
cols <-1:size
outer(rows, cols, FUN=fun)
}
mat2<- function(size){
rows<-1:size
cols <-1:size
return outer(rows, cols, FUN=fun)
}
fun(2,3)
mat2<- function(size){
rows<-1:size
cols <-1:size
return outer(rows, cols, FUN=fun)
?outer
mat2<- function(size){
rows <- 1:size
cols <- 1:size
return outer(rows, cols, FUN=fun)
mat2<- function(size){
rows <- 1:size
cols <- 1:size
return(outer(rows, cols, FUN=fun))
}
fun(2,3)
mat2(3)
fun <- function(i,j) 1/min(i,j)
mat2<- function(size){
rows <- 1:size
cols <- 1:size
return(outer(rows, cols, FUN=fun))
}
fun(2,3)
mat2(3)
min(2,3)
1/min(2,3)
fun <- function(i,j) i*j
fun(2,3)
mat2<- function(size){
rows <- 1:size
cols <- 1:size
return(outer(rows, cols, FUN=fun))
}
fun(2,3)
mat2(3)
fun(2,3)
fun <- function(i,j) 1/min(i,j)
#1/min(i,j)
fun(2,3)
mat2<- function(size){
rows <- 1:size
cols <- 1:size
return(outer(rows, cols, FUN=fun))
}
fun(2,3)
mat2(3)
size <-4
rows <- 1:size
cols <- 1:size
outer(rows, cols, FUN=fun)
size <-4
rows <- 1:size
cols <- 1:size
outer(rows, cols, FUN=fun)
fun <- function(i,j) 1/min(i,j)
?min
fun <- function(i,j) 1/min(c(i,j))
#1/min(i,j)
fun(2,3)
mat2<- function(size){
rows <- 1:size
cols <- 1:size
return(outer(rows, cols, FUN=fun))
}
fun(2,3)
mat2(3)
fun <- function(i,j) {z <-cbind(i,j); 1/min(c(z[,i],z[,j]))
#1/min(i,j)
fun(2,3)
fun <- function(i,j) {z <-cbind(i,j); 1/min(c(z[,i],z[,j]))}
#1/min(i,j)
fun(2,3)
fun <- function(i,j) {z <-cbind(i,j); 1/min(c(z[,1],z[,2]))}
#1/min(i,j)
fun(2,3)
fun <- function(i,j) {z <-cbind(i,j); 1/min(z[,1],z[,2])}
#1/min(i,j)
fun(2,3)
x
dads
asdf
}
i<-2; j<-3
z <-cbind(i,j)
z
min(z[,1],z[,2])
min(z[,1],z[,2])^-1
unlist(min(z[,1],z[,2])^-1)
cat(min(z[,1],z[,2])^-1)
fun <- function(i,j) {cat(1/min(i,j))}
fun(2,3)
mat2<- function(size){
rows <- 1:size
cols <- 1:size
return(outer(rows, cols, FUN=fun))
}
fun(2,3)
mat2(3)
fun <- function(i,j) {cat(1/min(i,j))}
fun(2,3)
mat2<- function(size){
rows <- 1:size
cols <- 1:size
return(outer(rows, cols, FUN=fun))
}
fun(2,3)
mat2(3)
fun <- function(i,j) {z <-cbind(i,j); 1/min(z[,1],z[,2])}
fun(2,3)
mat2<- function(size){
rows <- 1:size
cols <- 1:size
return(outer(rows, cols, FUN=fun))
}
fun(2,3)
mat2(3)
i+j
is.vector(i)
is.vector(1/min(i,j))
mat <- matrix(NA, nrow=5, ncol=5)
outer(1:nrow(mat), 1:ncol(mat) , FUN="*")
outer(1:nrow(mat), 1:ncol(mat) , FUN=function(r,c) 1/min(r+c))
outer(1:nrow(mat), 1:ncol(mat) , FUN=function(r,c) 1/min(r,c))
mat <- matrix(NA, nrow=5, ncol=5)
outer(1:nrow(mat), 1:ncol(mat) , FUN=function(r,c) 1/min(r,c))
outer(1:nrow(mat), 1:ncol(mat) , FUN=function(r,c) min(r,c))
outer(1:nrow(mat), 1:ncol(mat) , FUN=function(r,c) min(r,c))
outer(1:nrow(mat), 1:ncol(mat) , FUN=function(r,c) log(r+c))
outer(1:nrow(mat), 1:ncol(mat) , FUN=function(r,c) 1/log(r+c))
min(2,3)
min(2,3)[1]
?min
min(5:1, pi)
pmin(5:1, pi)
outer(1:nrow(mat), 1:ncol(mat) , FUN=function(r,c) z<-ifelse(r<c,r,c);1/z)
outer(1:nrow(mat), 1:ncol(mat) , FUN=function(r,c) {z<-ifelse(r<c,r,c); 1/z})
mat <- matrix(NA, nrow=5, ncol=5)
mat<-outer(1:nrow(mat), 1:ncol(mat) , FUN=function(r,c) {z<-ifelse(r<c,r,c); 1/z})
det(mat)
mat <- matrix(NA, nrow=5, ncol=5)
#outer(1:nrow(mat), 1:ncol(mat) , FUN="*")
mat<-outer(1:nrow(mat), 1:ncol(mat) , FUN=function(r,c) {z<-ifelse(r<c,r,c); 1/z})
det(mat)
mat2<- function(size){
mat <- matrix(NA, nrow=size, ncol=size)
#outer(1:nrow(mat), 1:ncol(mat) , FUN="*")
mat<-outer(1:nrow(mat), 1:ncol(mat) , FUN=function(r,c) {z<-ifelse(r<c,r,c); 1/z})
det(mat)
}
lapply(mat2,1:10)
mat2<- function(size){
mat <- matrix(NA, nrow=size, ncol=size)
#outer(1:nrow(mat), 1:ncol(mat) , FUN="*")
mat<-outer(1:nrow(mat), 1:ncol(mat) , FUN=function(r,c) {z<-ifelse(r<c,r,c); 1/z})
det(mat)
}
lapply(mat2,1:10)
lapply(1:10, FUN = mat2)
as.vector(lapply(1:10, FUN = mat2))
as.vector(lapply(1:10, FUN = mat2))
unlist(lapply(1:10, FUN = mat2))
cat(sprintf(unlist(lapply(1:10, FUN = mat2)))
cat(sprintf(unlist(lapply(1:10, FUN = mat2)))
cat(sprintf(unlist(lapply(1:10, FUN = mat2))))
cat(sprintf(lapply(1:10, FUN = mat2)))
cat(sprintf(%.2f,lapply(1:10, FUN = mat2)))
cat(sprintf(%.2f,lapply(1:10, FUN = mat2)) )
cat(sprintf('%.2f',lapply(1:10, FUN = mat2)) )
cat(sprintf('%.4f',lapply(1:10, FUN = mat2)) )
cat(sprintf('%.9f',lapply(1:10, FUN = mat2)) )
data("iris")
summary(iris)
boxplot(iris$Sepal.Width)
plot.new()
boxplot(iris$Sepal.Width)
mtext('petal width')
col(red)
boxplot(iris$Sepal.Width, col = 'red')
shannon.entropy <- function(p)
{
if (min(p) < 0 || sum(p) <= 0)
return(NA)
p.norm <- p[p>0]/sum(p)
-sum(log2(p.norm)*p.norm)
}
shannon.entropy(8/12)
shannon.entropy(.76)
shannon.entropy(c(12,8))
shannon.entropy(c(2,8))
infoGain <-function( pParentToChildren, breakDowns){
sum(pParentToChildren*shannon.entropy(breakDowns))
}
breakDowns <- list(c(12,8),c(8,2))
breakDowns <- list(c(12,8),c(8,2))
ParentToChildren <- c(20,10)
pPrentToChildren<- ParentToChildren/sum(ParentToChildren)
pParentToChildren
(pParentToChildren<- ParentToChildren/sum(ParentToChildren))
pParentToChildren*shannon.entropy(breakDowns)
c(c(1,2),c(3,4))
vector(c(1,2),c(2,4))
vector(c(1,2),c(2,4), length = 2)
pParentToChildren
shannon.entropy(breakDowns)
lapply(breakDowns,shannon.entropy)
sum(pParentToChildren*lapply(breakDowns,shannon.entropy))
unlist(lapply(breakDowns,shannon.entropy))
sum(pParentToChildren*unlist(lapply(breakDowns,shannon.entropy)))
(infoGain <-function( pParentToChildren, breakDowns))
lapply(breakDowns,shannon.entropy))
lapply(breakDowns,shannon.entropy)
pParentToChildren*unlist(lapply(breakDowns,shannon.entropy))
infoGain <-function( pParentToChildren, breakDowns){
shannon.entropy(pParentToChildren)- sum(pParentToChildren*unlist(lapply(breakDowns,shannon.entropy)))
}
function( pParentToChildren, breakDowns)
c
infoGain(c(20,10), list(c(12,8),c(8,2)))
parentToChildren
parentToChildren <- c(20,10)
pParentToChildren<- parentToChildren/sum(parentToChildren)
pParentToChildren
shannon.entropy(pParentToChildren)
shannon.entropy(parentToChildren)
ParentToChildren
pParentToChildren
unlist(lapply(breakDowns,shannon.entropy))
sum(pParentToChildren*unlist(lapply(breakDowns,shannon.entropy))
)
shannon.entropy(parentToChildren)- sum(pParentToChildren*unlist(lapply(breakDowns,shannon.entropy)))
options(digits = 3)
shannon.entropy(parentToChildren)- sum(pParentToChildren*unlist(lapply(breakDowns,shannon.entropy)))
infoGain(c(4,4), list(c(2,2),c(2,2)))
infoGain(c(4,4), list(c(2,2),c(2,2)))
pParentToChildren <-c(4,4)
pPrentToChildren
pParentToChildren<- parentToChildren/sum(parentToChildren)
pPrentToChildren
pParentToChildren <-c(4,4)
pParentToChildren
parentToChildren <-c(4,4)
pParentToChildren<- parentToChildren/sum(parentToChildren)
pParentToChildren
breakDowns <-list(c(2,2),c(2,2))
pParentToChildren*unlist(lapply(breakDowns,shannon.entropy))
shannon.entropy(parentToChildren)
sum(pParentToChildren*unlist(lapply(breakDowns,shannon.entropy))
)
shannon.entropy(parentToChildren)- sum(pParentToChildren*unlist(lapply(breakDowns,shannon.entropy)))
infoGain(c(4,4), list(c(2,2),c(2,2)))
infoGain <-function( parentBD, childrenBD){ # BD is the breakdown in each class
# inlcude validation test
# 1) size of argument must be the same and all enteries are non-negative integers
# that sum of each element in breakdown is equal to parentTo children and all positive.
pParentToChildren<- parentBD/sum(parentBD)
shannon.entropy(parentToChildren)- sum(pParentToChildren*unlist(lapply(childrenBD,shannon.entropy)))
}
infoGain(c(20,10), list(c(12,8),c(8,2)))
infoGain(c(4,4), list(c(2,2),c(2,2)))
infoGain(c(20,10), list(c(12,8),c(8,2)))
infoGain(c(20,10), list(c(12,8),c(8,2)))
infoGain <-function( parentBD, childrenBD){ # BD is the breakdown in each class
# inlcude validation test
# 1) size of argument must be the same and all enteries are non-negative integers
# that sum of each element in breakdown is equal to parentTo children and all positive.
pParentToChildren<- parentBD/sum(parentBD)
shannon.entropy(parentBD)- sum(pParentToChildren*unlist(lapply(childrenBD,shannon.entropy)))
}
infoGain(c(20,10), list(c(12,8),c(8,2)))
infoGain(c(4,4), list(c(2,2),c(2,2)))
library(nlme)
summary(nlme)
?nlme
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(nlme)
library(lattice)
library(datasets)
data(airquality)
xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
trellis.par.set()
splom()
par()
print.trellis
print.trellis()
qplot(Wind, Ozone, data = airquality)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
g
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
cls <- c(Date='character', Time ='character'   ,Global_active_power = 'numeric' , Global_reactive_power ='numeric' , Voltage='numeric',Global_intensity='numeric', Sub_metering_1 ='numeric',Sub_metering_2 ='numeric'   ,     Sub_metering_3 = 'numeric'       )
EPC <- read.table("../household_power_consumption.txt", colClasses = cls, header=TRUE, sep=";", stringsAsFactors=FALSE, na.strings = '?')
setwd("~/Documents/FALL 2015/Explanatory Data/Projects/Project 1/ExData_Plotting1")
EPC <- read.table("../household_power_consumption.txt", colClasses = cls, header=TRUE, sep=";", stringsAsFactors=FALSE, na.strings = '?')
x <- paste(EPC$Date, EPC$Time)
date1 <- strptime(x,"%d/%m/%Y  %H:%M:%S" )
EPC$Date <-date1
EPC$Time <- as.factor(weekdays(EPC$Date))
DATE1 <- as.Date("2007-02-01 00:00:00", "%Y-%m-%d %H:%M:%S")
DATE2 <- as.Date("2007-02-02 23:59:59", "%Y-%m-%d %H:%M:%S")
DATE2 - DATE1
Test2007 <- subset(EPC, as.Date(date1) >= DATE1 & as.Date(date1) <= DATE2)
dim(Test2007)
rm(EPC)
attach(Test2007)
# Now to draw plot two ( this is a time series and one argument is enough)
plot.ts(Test2007$Global_active_power,  xaxt = "n", yLab = "Global Active Power(killowatts)")
?plot.ts
plot.ts(Test2007$Global_active_power,  xaxt = "n", xy.labels =  "Global Active Power(killowatts)")
axis(1, at=c(0, 1440, 2880), labels=c("Thu", "Fri", "Sat"))
plot.ts(Test2007$Global_active_power,  xaxt = "n", aaxes = F)
plot.ts(Test2007$Global_active_power,  xaxt = "n", aaxes = F)
warnings()
plot.ts(Test2007$Global_active_power,  xaxt = "n", axes = F)
axis(2)
plot.ts(Test2007$Global_active_power,  xaxt = "n", axes = F)
axis(2, labels = "Global Active Power(killowatts)")
axis(2, labels = "Global Active Power(killowatts)")
plot.ts(Test2007$Global_active_power,  xaxt = "n")
axis(1, at=c(0, 1440, 2880), labels=c("Thu", "Fri", "Sat"))
plot.ts(Test2007$Global_active_power,  xaxt = "n")
axis(1, at=c(0, 1440, 2880), labels=c("Thu", "Fri", "Sat"))
plot(Test2007$Global_active_power,  xaxt = "n")
plot(ts(Test2007$Global_active_power),  xaxt = "n")
axis(1, at=c(0, 1440, 2880), labels=c("Thu", "Fri", "Sat"))
plot(ts(Test2007$Global_active_power),  xaxt = "n", ylab ="Global Active Power(killowatts)")
plot(ts(Test2007$Global_active_power),  xaxt = "n", ylab ="Global Active Power (killowatts)")
axis(1, at=c(0, 1440, 2880), labels=c("Thu", "Fri", "Sat"))
dev.copy(png, file = 'plot2.png', width = 480, height = 480)
dev.off()
class(date1)
plot(ts(Test2007$Global_active_power),  xaxt = "n", ylab ="Global Active Power (killowatts)", type = 'n')
points(ts(Test2007$Sub_metering_1))
plot(ts(Test2007$Global_active_power),  xaxt = "n", ylab ="Global Active Power (killowatts)", type = 'n')
plot(ts(Test2007$Sub_metering_1))
plot(ts(Test2007$Sub_metering_2))
plot(ts(Test2007$Sub_metering_2), col = 'red')
plot(ts(Test2007$Sub_metering_3), col = 'blue')
plot(ts(Test2007$Global_active_power),  xaxt = "n", ylab ="Energy Sub Metering", type = 'n')
plot(ts(Test2007$Global_active_power),  xaxt = "n", ylab ="Energy Sub Metering", xlab = '', type = 'n')
plot(ts(Test2007$Global_active_power),  xaxt = "n",xlab = '', ylab ="Global Active Power (killowatts)")
axis(1, at=c(0, 1440, 2880), labels=c("Thu", "Fri", "Sat"))
dev.copy(png, file = 'plot2.png', width = 480, height = 480)
dev.off()
lines(ts(Test2007$Sub_metering_1))
plot(ts(Test2007$Global_active_power),  xaxt = "n", ylab ="Energy Sub Metering", xlab = '', type = 'n')
lines(ts(Test2007$Sub_metering_1))
lines(ts(Test2007$Sub_metering_2), col = 'red')
lines(ts(Test2007$Sub_metering_3), col = 'blue')
axis(1, at=c(0, 1440, 2880), labels=c("Thu", "Fri", "Sat"))
dev.copy(png, file = 'plot2.png', width = 480, height = 480)
dev.copy(png, file = 'plot3.png', width = 480, height = 480)
dev.off()
plot(ts(Test2007$Global_active_power),  xaxt = "n", ylab ="Energy Sub Metering", xlab = '', ylim=c(0,40), type = 'n')
lines(ts(Test2007$Sub_metering_1))
lines(ts(Test2007$Sub_metering_2), col = 'red')
lines(ts(Test2007$Sub_metering_3), col = 'blue')
legend('topright', pch = 1, col = c('black', 'red', 'blue'), legend =c('Sub_metering_1','Sub_metering_2','Sub_metering_3')
axis(1, at=c(0, 1440, 2880), labels=c("Thu", "Fri", "Sat"))
plot(ts(Test2007$Global_active_power),  xaxt = "n", ylab ="Energy Sub Metering", xlab = '', ylim=c(0,40), type = 'n')
lines(ts(Test2007$Sub_metering_1))
lines(ts(Test2007$Sub_metering_2), col = 'red')
lines(ts(Test2007$Sub_metering_3), col = 'blue')
legend('topright', pch = 1, col = c('black', 'red', 'blue'), legend =c('Sub_metering_1','Sub_metering_2','Sub_metering_3')
legend('topright', pch = 1, col = c('black', 'red', 'blue'), legend =c('Sub_metering_1','Sub_metering_2','Sub_metering_3'))
axis(1, at=c(0, 1440, 2880), labels=c("Thu", "Fri", "Sat"))
dev.copy(png, file = 'plot3.png', width = 480, height = 480)
dev.off()
lines(ts(Test2007$Sub_metering_2), col = 'red')
lines(ts(Test2007$Sub_metering_3), col = 'blue')
legend('topright', pch = 1, col = c('black', 'red', 'blue'), legend =c('Sub_metering_1','Sub_metering_2','Sub_metering_3'))
legend('topright', pch = 0, col = c('black', 'red', 'blue'), legend =c('Sub_metering_1','Sub_metering_2','Sub_metering_3'))
legend('topright', pch = 2, col = c('black', 'red', 'blue'), legend =c('Sub_metering_1','Sub_metering_2','Sub_metering_3'))
legend('topright', pch = 3, col = c('black', 'red', 'blue'), legend =c('Sub_metering_1','Sub_metering_2','Sub_metering_3'))
legend('topright', pch = 4, col = c('black', 'red', 'blue'), legend =c('Sub_metering_1','Sub_metering_2','Sub_metering_3'))
legend('topright', pch = 5, col = c('black', 'red', 'blue'), legend =c('Sub_metering_1','Sub_metering_2','Sub_metering_3'))
legend('topright', pch = 6, col = c('black', 'red', 'blue'), legend =c('Sub_metering_1','Sub_metering_2','Sub_metering_3'))
legend('topright', pch = 7, col = c('black', 'red', 'blue'), legend =c('Sub_metering_1','Sub_metering_2','Sub_metering_3'))
?pch
legend('topright', lwd = 3, col = c('black', 'red', 'blue'), legend =c('Sub_metering_1','Sub_metering_2','Sub_metering_3'))
plot(ts(Test2007$Global_active_power),  xaxt = "n", ylab ="Energy Sub Metering", xlab = '', ylim=c(0,40), type = 'n')
lines(ts(Test2007$Sub_metering_1))
lines(ts(Test2007$Sub_metering_2), col = 'red')
lines(ts(Test2007$Sub_metering_3), col = 'blue')
plot(ts(Test2007$Global_active_power),  xaxt = "n", ylab ="Energy Sub Metering", xlab = '', ylim=c(0,30), type = 'n')
lines(ts(Test2007$Sub_metering_1))
lines(ts(Test2007$Sub_metering_2), col = 'red')
lines(ts(Test2007$Sub_metering_3), col = 'blue')
legend('topright', lwd = 3, col = c('black', 'red', 'blue'), legend =c('Sub_metering_1','Sub_metering_2','Sub_metering_3'))
legend('topright', lwd = 1, col = c('black', 'red', 'blue'), legend =c('Sub_metering_1','Sub_metering_2','Sub_metering_3'))
legend('topright', lwd = 1, col = c('black', 'red', 'blue'),
legend =c('Sub_metering_1','Sub_metering_2','Sub_metering_3'))
plot(ts(Test2007$Global_active_power),  xaxt = "n", ylab ="Energy Sub Metering", xlab = '', ylim=c(0,39), type = 'n')
lines(ts(Test2007$Sub_metering_1))
lines(ts(Test2007$Sub_metering_2), col = 'red')
lines(ts(Test2007$Sub_metering_3), col = 'blue')
legend('topright', lwd = 1, col = c('black', 'red', 'blue'),
legend =c('Sub_metering_1','Sub_metering_2','Sub_metering_3'))
axis(1, at=c(0, 1440, 2880), labels=c("Thu", "Fri", "Sat"))
axis(2, at=c(0, 10, 20,30))
plot(ts(Test2007$Global_active_power),  xaxt = "n", ylab ="Energy Sub Metering", xlab = '', type = 'n')
lines(ts(Test2007$Sub_metering_1))
lines(ts(Test2007$Sub_metering_2), col = 'red')
lines(ts(Test2007$Sub_metering_3), col = 'blue')
legend('topright', lwd = 1, col = c('black', 'red', 'blue'),
legend =c('Sub_metering_1','Sub_metering_2','Sub_metering_3'))
axis(1, at=c(0, 1440, 2880), labels=c("Thu", "Fri", "Sat"))
axis(2, at=c(0, 10, 20,30))
cls <- c(Date='character', Time ='character'   ,Global_active_power = 'numeric' , Global_reactive_power ='numeric' , Voltage='numeric',Global_intensity='numeric', Sub_metering_1 ='numeric',Sub_metering_2 ='numeric'   ,     Sub_metering_3 = 'numeric'       )
EPC <- read.table("../household_power_consumption.txt", colClasses = cls, header=TRUE, sep=";", stringsAsFactors=FALSE, na.strings = '?')
plot(ts(EPC$Global_active_power),  xaxt = "n", ylab ="Energy Sub Metering", xlab = '', type = 'n')
plot(ts(EPC$Global_active_power),  xaxt = "n", ylab ="Energy Sub Metering", xlab = '', type = 'n')
lines(ts(Test2007$Sub_metering_1))
lines(ts(Test2007$Sub_metering_2), col = 'red')
lines(ts(Test2007$Sub_metering_3), col = 'blue')
legend('topright', lwd = 1, col = c('black', 'red', 'blue'),
legend =c('Sub_metering_1','Sub_metering_2','Sub_metering_3'))
axis(1, at=c(0, 1440, 2880), labels=c("Thu", "Fri", "Sat"))
axis(2, at=c(0, 10, 20,30))
plot(ts(EPC$Global_active_power),  xaxt = "n", ylab ="Energy Sub Metering", ylim=c(0,40), xlab = '', type = 'n')
lines(ts(Test2007$Sub_metering_1))
lines(ts(Test2007$Sub_metering_2), col = 'red')
lines(ts(Test2007$Sub_metering_3), col = 'blue')
legend('topright', lwd = 1, col = c('black', 'red', 'blue'),
legend =c('Sub_metering_1','Sub_metering_2','Sub_metering_3'))
axis(1, at=c(0, 1440, 2880), labels=c("Thu", "Fri", "Sat"))
axis(2, at=c(0, 10, 20,30))
plot(ts(EPC$Global_active_power),  xaxt = "n", ylab ="Energy Sub Metering", yaxt = "n", xlab = '', type = 'n')
lines(ts(Test2007$Sub_metering_1))
lines(ts(Test2007$Sub_metering_2), col = 'red')
lines(ts(Test2007$Sub_metering_3), col = 'blue')
legend('topright', lwd = 1, col = c('black', 'red', 'blue'),
legend =c('Sub_metering_1','Sub_metering_2','Sub_metering_3'))
axis(1, at=c(0, 1440, 2880), labels=c("Thu", "Fri", "Sat"))
axis(2, at=c(0, 10, 20,30))
cls <- c(Date='character', Time ='character'   ,Global_active_power = 'numeric' , Global_reactive_power ='numeric' , Voltage='numeric',Global_intensity='numeric', Sub_metering_1 ='numeric',Sub_metering_2 ='numeric'   ,     Sub_metering_3 = 'numeric'       )
EPC <- read.table("../household_power_consumption.txt", colClasses = cls, header=TRUE, sep=";", stringsAsFactors=FALSE, na.strings = '?')
x <- paste(EPC$Date, EPC$Time)
date1 <- strptime(x,"%d/%m/%Y  %H:%M:%S" )
EPC$Date <-date1
EPC$Time <- as.factor(weekdays(EPC$Date))
DATE1 <- as.Date("2007-02-01 00:00:00", "%Y-%m-%d %H:%M:%S")
DATE2 <- as.Date("2007-02-02 23:59:59", "%Y-%m-%d %H:%M:%S")
DATE2 - DATE1
Test2007 <- subset(EPC, as.Date(date1) >= DATE1 & as.Date(date1) <= DATE2)
dim(Test2007)
attach(Test2007)
plot(ts(EPC$Global_active_power),  xaxt = "n", ylab ="Energy Sub Metering", yaxt = "n", xlab = '', type = 'n')
lines(ts(Test2007$Sub_metering_1))
lines(ts(Test2007$Sub_metering_2), col = 'red')
lines(ts(Test2007$Sub_metering_3), col = 'blue')
legend('topright', lwd = 1, col = c('black', 'red', 'blue'),
legend =c('Sub_metering_1','Sub_metering_2','Sub_metering_3'))
axis(1, at=c(0, 1440, 2880), labels=c("Thu", "Fri", "Sat"))
axis(2, at=c(0, 10, 20,30))
